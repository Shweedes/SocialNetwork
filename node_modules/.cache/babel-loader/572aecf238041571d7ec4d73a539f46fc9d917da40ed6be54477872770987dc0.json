{"ast":null,"code":"var _jsxFileName = \"D:\\\\01-first-project\\\\src\\\\components\\\\Profile\\\\ProfileContainer.jsx\",\n  _s = $RefreshSig$();\n/*import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport { viewCurrentProfile} from \"../../redux/profilePageReducer\";\r\nimport {useParams} from 'react-router-dom';\r\n\r\n\r\n// Классовый компонент\r\nclass ProfileContainer extends React.Component {\r\n\r\n    componentDidMount() {\r\n        let userId = this.props.userId;\r\n\r\n        if(!userId) {\r\n            userId = 2;\r\n        }\r\n\r\n        this.props.viewCurrentProfile(userId);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile profile={this.props.profile}/>\r\n        )\r\n    }\r\n}\r\n\r\n// Обертка для получения userId через useParams и передачи в ProfileContainer\r\nconst ProfileContainerWithRouter = (props) => {\r\n    const {userId} = useParams(); // Получаем параметр userId из маршрута// useParams возвращает объект с параметрами маршрута\r\n\r\n    return <ProfileContainer {...props} userId={userId} />;\r\n};\r\n\r\nlet mapStateToProps = (state) => ({\r\n    profile: state.profilePage.profile\r\n});\r\n\r\nexport default connect(mapStateToProps, {viewCurrentProfile})(ProfileContainerWithRouter);*/\n\nimport React, { useEffect } from 'react';\nimport Profile from \"./Profile\";\nimport { connect } from \"react-redux\";\nimport { viewCurrentProfile } from \"../../redux/profilePageReducer\";\nimport { useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProfileContainer = props => {\n  _s();\n  const {\n    userId\n  } = useParams(); // Получаем параметр userId из маршрута\n\n  useEffect(() => {\n    let currentUserId = userId;\n    if (!currentUserId) {\n      currentUserId = 2;\n    }\n    props.viewCurrentProfile(currentUserId);\n  }, [userId, props]); // Выполнить только при изменении userId или props\n\n  return /*#__PURE__*/_jsxDEV(Profile, {\n    profile: props.profile\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 9\n  }, this);\n};\n_s(ProfileContainer, \"YzBrYyUGWNu9wx0MdmpL83xRT2o=\", false, function () {\n  return [useParams];\n});\n_c = ProfileContainer;\nlet mapStateToProps = state => ({\n  profile: state.profilePage.profile\n});\nexport default connect(mapStateToProps, {\n  viewCurrentProfile\n})(ProfileContainer);\nvar _c;\n$RefreshReg$(_c, \"ProfileContainer\");","map":{"version":3,"names":["React","useEffect","Profile","connect","viewCurrentProfile","useParams","jsxDEV","_jsxDEV","ProfileContainer","props","_s","userId","currentUserId","profile","fileName","_jsxFileName","lineNumber","columnNumber","_c","mapStateToProps","state","profilePage","$RefreshReg$"],"sources":["D:/01-first-project/src/components/Profile/ProfileContainer.jsx"],"sourcesContent":["/*import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport { viewCurrentProfile} from \"../../redux/profilePageReducer\";\r\nimport {useParams} from 'react-router-dom';\r\n\r\n\r\n// Классовый компонент\r\nclass ProfileContainer extends React.Component {\r\n\r\n    componentDidMount() {\r\n        let userId = this.props.userId;\r\n\r\n        if(!userId) {\r\n            userId = 2;\r\n        }\r\n\r\n        this.props.viewCurrentProfile(userId);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile profile={this.props.profile}/>\r\n        )\r\n    }\r\n}\r\n\r\n// Обертка для получения userId через useParams и передачи в ProfileContainer\r\nconst ProfileContainerWithRouter = (props) => {\r\n    const {userId} = useParams(); // Получаем параметр userId из маршрута// useParams возвращает объект с параметрами маршрута\r\n\r\n    return <ProfileContainer {...props} userId={userId} />;\r\n};\r\n\r\nlet mapStateToProps = (state) => ({\r\n    profile: state.profilePage.profile\r\n});\r\n\r\nexport default connect(mapStateToProps, {viewCurrentProfile})(ProfileContainerWithRouter);*/\r\n\r\nimport React, {useEffect} from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {viewCurrentProfile} from \"../../redux/profilePageReducer\";\r\nimport {useParams} from 'react-router-dom';\r\n\r\nconst ProfileContainer = (props) => {\r\n    const {userId} = useParams(); // Получаем параметр userId из маршрута\r\n\r\n    useEffect(() => {\r\n        let currentUserId = userId;\r\n\r\n        if (!currentUserId) {\r\n            currentUserId = 2;\r\n        }\r\n\r\n        props.viewCurrentProfile(currentUserId);\r\n    }, [userId, props]); // Выполнить только при изменении userId или props\r\n\r\n    return (\r\n        <Profile profile={props.profile}/>\r\n    );\r\n}\r\n\r\nlet mapStateToProps = (state) => ({\r\n    profile: state.profilePage.profile\r\n});\r\n\r\nexport default connect(mapStateToProps, {viewCurrentProfile})(ProfileContainer);\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,IAAGC,SAAS,QAAO,OAAO;AACtC,OAAOC,OAAO,MAAM,WAAW;AAC/B,SAAQC,OAAO,QAAO,aAAa;AACnC,SAAQC,kBAAkB,QAAO,gCAAgC;AACjE,SAAQC,SAAS,QAAO,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3C,MAAMC,gBAAgB,GAAIC,KAAK,IAAK;EAAAC,EAAA;EAChC,MAAM;IAACC;EAAM,CAAC,GAAGN,SAAS,CAAC,CAAC,CAAC,CAAC;;EAE9BJ,SAAS,CAAC,MAAM;IACZ,IAAIW,aAAa,GAAGD,MAAM;IAE1B,IAAI,CAACC,aAAa,EAAE;MAChBA,aAAa,GAAG,CAAC;IACrB;IAEAH,KAAK,CAACL,kBAAkB,CAACQ,aAAa,CAAC;EAC3C,CAAC,EAAE,CAACD,MAAM,EAAEF,KAAK,CAAC,CAAC,CAAC,CAAC;;EAErB,oBACIF,OAAA,CAACL,OAAO;IAACW,OAAO,EAAEJ,KAAK,CAACI;EAAQ;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAC,CAAC;AAE1C,CAAC;AAAAP,EAAA,CAhBKF,gBAAgB;EAAA,QACDH,SAAS;AAAA;AAAAa,EAAA,GADxBV,gBAAgB;AAkBtB,IAAIW,eAAe,GAAIC,KAAK,KAAM;EAC9BP,OAAO,EAAEO,KAAK,CAACC,WAAW,CAACR;AAC/B,CAAC,CAAC;AAEF,eAAeV,OAAO,CAACgB,eAAe,EAAE;EAACf;AAAkB,CAAC,CAAC,CAACI,gBAAgB,CAAC;AAAC,IAAAU,EAAA;AAAAI,YAAA,CAAAJ,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}